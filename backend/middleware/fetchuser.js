/*
This code is a middleware function named fetchuser that extracts user information from a JSON Web Token (JWT) and adds it to the req object so that it can be accessed by subsequent middleware functions or routes in an Express.js application.
*/


const jwt = require('jsonwebtoken') //This library gives methods for encoding and decoding JSON Web Tokens.
const JWT_SECRET = "asdfghjkl"

//The fetchuser function is defined with three parameters: req, res, and next. These parameters represent the request object, the response object, and the next middleware function in the pipeline.

const fetchuser = (req, res, next) => {

    /* when a client (such as a web browser) sends a request to the server, it includes some information in the request headers. One of these headers might be called auth-token, which could contain a token string that was previously generated by the server and given to the client as a way to authenticate the client for future requests.

    The req.header('auth-token') method extracts the value of this auth - token header from the incoming request and assigns it to the token variable.This allows the server to check if the client is authorized to access certain resources or perform certain actions, depending on the contents of the token. */

    const token = req.header('auth-token')

    if (!token) {
        res.status(401).send({ error: "Please Authenticate Using a Valid Token" })
    }
    try {

        //This line verifies the token that was extracted from the auth-token header of the HTTP request. The jwt.verify() function is used to decode the token and ensure that it was signed with the same secret key (JWT_SECRET) that was used to generate it. If the token is valid, the decoded data is stored in the data variable.

        const data = jwt.verify(token, JWT_SECRET)

        //This line adds a new property to the req object called user and assigns it the value of the data.user property. The data.user property was extracted from the decoded token in the previous line and contains user information (such as a user ID).
        req.user = data.user

        /*
        In Express.js, middleware functions are executed in a pipeline, where each function in the pipeline can optionally modify the incoming HTTP request or outgoing response before passing control to the next function in the pipeline.

        The next() function is a callback function that is passed to each middleware function in the pipeline. When called, it passes control to the next middleware function in the pipeline.

        In the code you provided, next() is called after the user information has been extracted from the JWT and added to the req object. This indicates that the current middleware function has completed its tasks and that control should be passed to the next middleware function in the pipeline.
        */

        next()
    } catch (error) {
        res.status(401).send({ error: "Please Authenticate Using a Valid Token" })
    }

}

module.exports = fetchuser;